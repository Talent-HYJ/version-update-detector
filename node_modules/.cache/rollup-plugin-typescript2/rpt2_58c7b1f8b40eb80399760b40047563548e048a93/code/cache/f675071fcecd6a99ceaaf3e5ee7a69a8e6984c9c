{"code":"export class UpdateNotification {\n    constructor(options = {}, events = {}) {\n        this.container = null;\n        this.isVisible = false;\n        this.refreshing = false;\n        this.laterTimestamp = 0;\n        this.options = {\n            title: '应用更新提醒',\n            description: '请刷新页面以获得最新内容。',\n            showClose: false,\n            closeOnClickModal: false,\n            closeOnPressEscape: false,\n            forceUpdate: false,\n            customClass: 'update-notification-dialog',\n            width: '480px',\n            center: true,\n            buttonText: {\n                later: '稍后提醒',\n                refresh: '立即刷新',\n                refreshing: '正在刷新...'\n            },\n            laterInterval: 10 * 60 * 1000, // 10分钟\n            customStyles: {},\n            ...options\n        };\n        this.events = events;\n        this.init();\n    }\n    init() {\n        this.createContainer();\n        this.bindEvents();\n    }\n    createContainer() {\n        // 创建遮罩层\n        const overlay = document.createElement('div');\n        overlay.className = 'update-notification-overlay';\n        overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: rgba(0, 0, 0, 0.5);\n      z-index: 9999;\n      display: none;\n    `;\n        // 创建弹窗容器\n        this.container = document.createElement('div');\n        this.container.className = `update-notification-dialog ${this.options.customClass}`;\n        this.container.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      width: ${this.options.width};\n      max-width: 90%;\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n      z-index: 10000;\n      display: none;\n    `;\n        // 添加自定义样式\n        if (this.options.customStyles.container) {\n            this.container.style.cssText += this.options.customStyles.container;\n        }\n        overlay.appendChild(this.container);\n        document.body.appendChild(overlay);\n    }\n    bindEvents() {\n        if (!this.container)\n            return;\n        // ESC键关闭\n        if (this.options.closeOnPressEscape) {\n            document.addEventListener('keydown', (e) => {\n                if (e.key === 'Escape' && this.isVisible) {\n                    this.hide();\n                }\n            });\n        }\n        // 点击遮罩关闭\n        if (this.options.closeOnClickModal) {\n            const overlay = this.container.parentElement;\n            if (overlay) {\n                overlay.addEventListener('click', (e) => {\n                    if (e.target === overlay) {\n                        this.hide();\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * 显示更新通知\n     */\n    show(reason = 'unknown', forceUpdate = false) {\n        // 检查是否在稍后提醒间隔内\n        const now = Date.now();\n        if (reason !== 'resource-error' && this.laterTimestamp && now - this.laterTimestamp < this.options.laterInterval) {\n            return;\n        }\n        if (!this.container)\n            return;\n        this.isVisible = true;\n        this.refreshing = false;\n        // 更新内容\n        this.updateContent(reason, forceUpdate);\n        // 显示弹窗\n        const overlay = this.container.parentElement;\n        if (overlay) {\n            overlay.style.display = 'block';\n            this.container.style.display = 'block';\n        }\n        // 添加动画效果\n        requestAnimationFrame(() => {\n            if (this.container) {\n                this.container.style.opacity = '0';\n                this.container.style.transform = 'translate(-50%, -50%) scale(0.8)';\n                requestAnimationFrame(() => {\n                    if (this.container) {\n                        this.container.style.transition = 'all 0.3s ease';\n                        this.container.style.opacity = '1';\n                        this.container.style.transform = 'translate(-50%, -50%) scale(1)';\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * 隐藏更新通知\n     */\n    hide() {\n        var _a, _b;\n        if (!this.container)\n            return;\n        this.isVisible = false;\n        this.refreshing = false;\n        // 添加关闭动画\n        if (this.container) {\n            this.container.style.transition = 'all 0.3s ease';\n            this.container.style.opacity = '0';\n            this.container.style.transform = 'translate(-50%, -50%) scale(0.8)';\n        }\n        setTimeout(() => {\n            var _a;\n            const overlay = (_a = this.container) === null || _a === void 0 ? void 0 : _a.parentElement;\n            if (overlay) {\n                overlay.style.display = 'none';\n            }\n            if (this.container) {\n                this.container.style.display = 'none';\n            }\n        }, 300);\n        (_b = (_a = this.events).onClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * 更新弹窗内容\n     */\n    updateContent(reason, forceUpdate) {\n        if (!this.container)\n            return;\n        const { title, description, icon } = this.getContentByReason(reason, forceUpdate);\n        const isForceUpdate = forceUpdate || reason === 'resource-error';\n        this.container.innerHTML = `\n      <div class=\"update-notification-content\" style=\"padding: 20px;\">\n        <div class=\"update-notification-header\" style=\"text-align: center; margin-bottom: 20px;\">\n          <div class=\"update-notification-icon\" style=\"margin-bottom: 16px;\">\n            <i class=\"update-icon\" style=\"\n              display: inline-block;\n              width: 48px;\n              height: 48px;\n              background: #409eff;\n              border-radius: 50%;\n              color: white;\n              font-size: 24px;\n              line-height: 48px;\n              text-align: center;\n              animation: rotate 2s linear infinite;\n            \">${icon}</i>\n          </div>\n          <h3 style=\"\n            margin: 0 0 16px 0;\n            color: #303133;\n            font-weight: 600;\n            font-size: 20px;\n          \">${title}</h3>\n          <p style=\"\n            margin: 0 0 16px 0;\n            color: #606266;\n            font-size: 14px;\n            line-height: 1.6;\n          \">${description}</p>\n          ${this.getErrorDetails(reason)}\n        </div>\n        <div class=\"update-notification-footer\" style=\"\n          text-align: right;\n          border-top: 1px solid #ebeef5;\n          padding-top: 20px;\n        \">\n          ${!isForceUpdate\n            ? `\n            <button class=\"later-btn\" style=\"\n              margin-right: 10px;\n              padding: 8px 16px;\n              border: 1px solid #dcdfe6;\n              border-radius: 4px;\n              background: white;\n              color: #606266;\n              cursor: pointer;\n              font-size: 14px;\n            \">${this.options.buttonText.later}</button>\n          `\n            : ''}\n          <button class=\"refresh-btn\" style=\"\n            padding: 8px 16px;\n            border: 1px solid #409eff;\n            border-radius: 4px;\n            background: #409eff;\n            color: white;\n            cursor: pointer;\n            font-size: 14px;\n          \">${this.refreshing ? this.options.buttonText.refreshing : this.options.buttonText.refresh}</button>\n        </div>\n      </div>\n      <style>\n        @keyframes rotate {\n          from { transform: rotate(0deg); }\n          to { transform: rotate(360deg); }\n        }\n        .update-notification-dialog {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        }\n        .later-btn:hover {\n          background: #f5f7fa;\n        }\n        .refresh-btn:hover {\n          background: #66b1ff;\n        }\n        .refresh-btn:disabled {\n          background: #a0cfff;\n          cursor: not-allowed;\n        }\n      </style>\n    `;\n        // 绑定按钮事件\n        this.bindButtonEvents();\n    }\n    /**\n     * 根据更新原因获取内容\n     */\n    getContentByReason(reason, forceUpdate) {\n        switch (reason) {\n            case 'version-change':\n                return {\n                    title: '发现新版本',\n                    description: '为了获得更好的使用体验，请刷新页面更新到最新版本。',\n                    icon: '↻'\n                };\n            case 'resource-error':\n                return {\n                    title: '应用已更新',\n                    description: '请刷新页面以获得最新内容。',\n                    icon: '⚠'\n                };\n            case 'network-error':\n                return {\n                    title: '网络连接异常',\n                    description: '网络连接异常，建议刷新页面重试。',\n                    icon: '⚠'\n                };\n            case 'redeploy':\n            default:\n                return {\n                    title: '应用已更新',\n                    description: '请刷新页面以获得最新内容。',\n                    icon: '↻'\n                };\n        }\n    }\n    /**\n     * 获取错误详情\n     */\n    getErrorDetails(reason) {\n        if (reason === 'resource-error') {\n            return `\n        <div style=\"\n          margin-top: 16px;\n          padding: 12px;\n          border: 1px solid #fbc4c4;\n          border-radius: 4px;\n          background-color: #fef0f0;\n          color: #f56c6c;\n          font-size: 14px;\n        \">\n          <span style=\"margin-right: 8px;\">⚠</span>\n          检测到部分资源加载失败，可能影响正常使用\n        </div>\n      `;\n        }\n        if (reason === 'network-error') {\n            return `\n        <div style=\"\n          margin-top: 16px;\n          padding: 12px;\n          border: 1px solid #fbc4c4;\n          border-radius: 4px;\n          background-color: #fef0f0;\n          color: #f56c6c;\n          font-size: 14px;\n        \">\n          <span style=\"margin-right: 8px;\">⚠</span>\n          网络连接异常，建议刷新页面重试\n        </div>\n      `;\n        }\n        return '';\n    }\n    /**\n     * 绑定按钮事件\n     */\n    bindButtonEvents() {\n        if (!this.container)\n            return;\n        const laterBtn = this.container.querySelector('.later-btn');\n        const refreshBtn = this.container.querySelector('.refresh-btn');\n        if (laterBtn) {\n            laterBtn.addEventListener('click', () => {\n                this.handleLater();\n            });\n        }\n        if (refreshBtn) {\n            refreshBtn.addEventListener('click', () => {\n                this.handleRefresh();\n            });\n        }\n    }\n    /**\n     * 处理刷新操作\n     */\n    handleRefresh() {\n        var _a, _b, _c;\n        this.refreshing = true;\n        (_b = (_a = this.events).onRefresh) === null || _b === void 0 ? void 0 : _b.call(_a);\n        // 更新按钮状态\n        const refreshBtn = (_c = this.container) === null || _c === void 0 ? void 0 : _c.querySelector('.refresh-btn');\n        if (refreshBtn) {\n            refreshBtn.disabled = true;\n            refreshBtn.textContent = this.options.buttonText.refreshing || '正在刷新...';\n        }\n        // 防止刷新失败，5秒后强制刷新\n        setTimeout(() => {\n            if (this.refreshing) {\n                window.location.reload();\n            }\n        }, 5000);\n    }\n    /**\n     * 处理稍后提醒操作\n     */\n    handleLater() {\n        var _a, _b;\n        this.laterTimestamp = Date.now();\n        this.hide();\n        (_b = (_a = this.events).onLater) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * 销毁通知组件\n     */\n    destroy() {\n        if (this.container) {\n            const overlay = this.container.parentElement;\n            if (overlay) {\n                document.body.removeChild(overlay);\n            }\n            this.container = null;\n        }\n    }\n    /**\n     * 检查是否可见\n     */\n    isNotificationVisible() {\n        return this.isVisible;\n    }\n}\n","references":["/Volumes/Lenovo/work/version-update-detector/src/VersionDetector.ts"],"dts":{"name":"/Volumes/Lenovo/work/version-update-detector/dist/UpdateNotification.d.ts","writeByteOrderMark":false,"text":"import { UpdateReason } from './VersionDetector';\nexport interface UpdateNotificationOptions {\n    /** 弹窗标题 */\n    title?: string;\n    /** 弹窗描述 */\n    description?: string;\n    /** 是否显示关闭按钮 */\n    showClose?: boolean;\n    /** 是否允许点击遮罩关闭 */\n    closeOnClickModal?: boolean;\n    /** 是否允许ESC键关闭 */\n    closeOnPressEscape?: boolean;\n    /** 是否强制更新（不显示稍后提醒按钮） */\n    forceUpdate?: boolean;\n    /** 自定义CSS类名 */\n    customClass?: string;\n    /** 弹窗宽度 */\n    width?: string;\n    /** 是否居中显示 */\n    center?: boolean;\n    /** 按钮文本配置 */\n    buttonText?: {\n        later?: string;\n        refresh?: string;\n        refreshing?: string;\n    };\n    /** 稍后提醒间隔时间（毫秒） */\n    laterInterval?: number;\n    /** 自定义样式 */\n    customStyles?: {\n        container?: string;\n        content?: string;\n        button?: string;\n    };\n}\nexport interface UpdateNotificationEvents {\n    onRefresh?: () => void;\n    onLater?: () => void;\n    onClose?: () => void;\n}\nexport declare class UpdateNotification {\n    private container;\n    private options;\n    private events;\n    private isVisible;\n    private refreshing;\n    private laterTimestamp;\n    constructor(options?: UpdateNotificationOptions, events?: UpdateNotificationEvents);\n    private init;\n    private createContainer;\n    private bindEvents;\n    /**\n     * 显示更新通知\n     */\n    show(reason?: UpdateReason, forceUpdate?: boolean): void;\n    /**\n     * 隐藏更新通知\n     */\n    hide(): void;\n    /**\n     * 更新弹窗内容\n     */\n    private updateContent;\n    /**\n     * 根据更新原因获取内容\n     */\n    private getContentByReason;\n    /**\n     * 获取错误详情\n     */\n    private getErrorDetails;\n    /**\n     * 绑定按钮事件\n     */\n    private bindButtonEvents;\n    /**\n     * 处理刷新操作\n     */\n    private handleRefresh;\n    /**\n     * 处理稍后提醒操作\n     */\n    private handleLater;\n    /**\n     * 销毁通知组件\n     */\n    destroy(): void;\n    /**\n     * 检查是否可见\n     */\n    isNotificationVisible(): boolean;\n}\n"}}
