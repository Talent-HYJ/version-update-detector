{"code":"export { VersionDetector } from './VersionDetector';\nexport { UpdateNotification } from './UpdateNotification';\n// 创建默认实例的工厂函数\nimport { VersionDetector } from './VersionDetector';\nimport { UpdateNotification } from './UpdateNotification';\n/**\n * 创建版本检测器和更新通知的默认实例\n */\nexport function createVersionUpdateDetector(detectorOptions = {}, notificationOptions = {}, notificationEvents = {}) {\n    const detector = new VersionDetector(detectorOptions);\n    const notification = new UpdateNotification(notificationOptions, notificationEvents);\n    // 自动绑定事件\n    detector.onUpdate((reason) => {\n        notification.show(reason);\n    });\n    detector.onResourceError(() => {\n        notification.show('resource-error', true);\n    });\n    return {\n        detector,\n        notification,\n        destroy: () => {\n            detector.destroy();\n            notification.destroy();\n        }\n    };\n}\n// 默认导出\nexport default {\n    VersionDetector,\n    UpdateNotification,\n    createVersionUpdateDetector\n};\n","references":["/Volumes/Lenovo/work/version-update-detector/src/VersionDetector.ts","/Volumes/Lenovo/work/version-update-detector/src/UpdateNotification.ts","/Volumes/Lenovo/work/version-update-detector/src/VersionDetector.ts","/Volumes/Lenovo/work/version-update-detector/src/UpdateNotification.ts","/Volumes/Lenovo/work/version-update-detector/src/VersionDetector.ts","/Volumes/Lenovo/work/version-update-detector/src/UpdateNotification.ts","/Volumes/Lenovo/work/version-update-detector/src/VersionDetector.ts","/Volumes/Lenovo/work/version-update-detector/src/UpdateNotification.ts"],"dts":{"name":"/Volumes/Lenovo/work/version-update-detector/dist/index.d.ts","writeByteOrderMark":false,"text":"export { VersionDetector } from './VersionDetector';\nexport { UpdateNotification } from './UpdateNotification';\nexport type { VersionDetectorOptions, PackageInfo, UpdateReason } from './VersionDetector';\nexport type { UpdateNotificationOptions, UpdateNotificationEvents } from './UpdateNotification';\nimport { VersionDetector } from './VersionDetector';\nimport { UpdateNotification } from './UpdateNotification';\nimport { VersionDetectorOptions } from './VersionDetector';\nimport { UpdateNotificationOptions, UpdateNotificationEvents } from './UpdateNotification';\n/**\n * 创建版本检测器和更新通知的默认实例\n */\nexport declare function createVersionUpdateDetector(detectorOptions?: VersionDetectorOptions, notificationOptions?: UpdateNotificationOptions, notificationEvents?: UpdateNotificationEvents): {\n    detector: VersionDetector;\n    notification: UpdateNotification;\n    destroy: () => void;\n};\ndeclare const _default: {\n    VersionDetector: typeof VersionDetector;\n    UpdateNotification: typeof UpdateNotification;\n    createVersionUpdateDetector: typeof createVersionUpdateDetector;\n};\nexport default _default;\n"}}
