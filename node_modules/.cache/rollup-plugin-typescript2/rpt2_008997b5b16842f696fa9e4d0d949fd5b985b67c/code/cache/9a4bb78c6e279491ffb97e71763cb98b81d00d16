{"code":"export class VersionDetector {\n    constructor(options = {}) {\n        this.timer = null;\n        this.isChecking = false;\n        this.onUpdateCallbacks = [];\n        this.onResourceErrorCallbacks = [];\n        this.currentVersion = window.version || '1.0.0';\n        this.options = {\n            checkInterval: 30 * 60 * 1000, // 30分钟\n            skipInDevelopment: true,\n            isDevelopment: () => this.detectLocalEnvironment(),\n            versionCheckUrl: '/package.json',\n            enableResourceErrorDetection: true,\n            ...options\n        };\n        this.checkInterval = this.options.checkInterval;\n        this.isLocalDevelopment = this.options.isDevelopment();\n        this.init();\n    }\n    init() {\n        // 如果是本地开发环境，不进行版本检测\n        if (this.isLocalDevelopment && this.options.skipInDevelopment) {\n            console.log('检测到本地开发环境，跳过版本检测');\n            return;\n        }\n        // 监听资源加载失败事件\n        if (this.options.enableResourceErrorDetection) {\n            this.listenResourceErrors();\n        }\n        // 开始定期检查版本\n        this.startVersionCheck();\n    }\n    /**\n     * 检测是否为本地开发环境\n     */\n    detectLocalEnvironment() {\n        // 检查是否为本地地址\n        const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' || window.location.hostname === '0.0.0.0';\n        // 检查环境变量\n        const isNodeEnvDev = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'development';\n        const isDev = isLocalhost || isNodeEnvDev;\n        console.log('开发环境检测:', { isLocalhost, isNodeEnvDev, isDev });\n        return isDev;\n    }\n    /**\n     * 监听资源加载失败事件\n     */\n    listenResourceErrors() {\n        // 监听全局错误事件\n        window.addEventListener('error', (event) => {\n            // 检查是否是资源加载错误\n            if (event.target !== window) {\n                const element = event.target;\n                const isResourceError = element.tagName &&\n                    (element.tagName.toLowerCase() === 'script' || element.tagName.toLowerCase() === 'link' || element.tagName.toLowerCase() === 'img');\n                if (isResourceError) {\n                    console.warn('资源加载失败:', element.src || element.href);\n                    this.handleResourceError(element);\n                }\n            }\n        }, true);\n        // 监听未处理的Promise rejection（可能的网络请求失败）\n        window.addEventListener('unhandledrejection', (event) => {\n            var _a, _b;\n            // 检查是否是网络相关错误\n            if (event.reason &&\n                (((_a = event.reason.message) === null || _a === void 0 ? void 0 : _a.includes('Loading chunk')) || ((_b = event.reason.message) === null || _b === void 0 ? void 0 : _b.includes('Failed to fetch')) || event.reason.code === 'ECONNABORTED')) {\n                console.warn('网络请求失败，可能是版本更新导致:', event.reason);\n                this.handleResourceError();\n            }\n        });\n    }\n    /**\n     * 处理资源加载错误\n     */\n    async handleResourceError(element) {\n        // 如果是本地开发环境，不处理资源错误\n        if (this.isLocalDevelopment && this.options.skipInDevelopment) {\n            console.log('本地开发环境，忽略资源加载错误');\n            return;\n        }\n        // 延迟一点时间，避免频繁检查\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        // 检查是否有新版本\n        const hasUpdate = await this.checkForUpdate();\n        if (hasUpdate) {\n            this.onResourceErrorCallbacks.forEach((callback) => {\n                try {\n                    callback(element);\n                }\n                catch (error) {\n                    console.error('Resource error callback error:', error);\n                }\n            });\n        }\n    }\n    /**\n     * 开始定期检查版本\n     */\n    startVersionCheck() {\n        // 如果是本地开发环境，不启动版本检查\n        if (this.isLocalDevelopment && this.options.skipInDevelopment) {\n            console.log('本地开发环境，跳过版本检查启动');\n            return;\n        }\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n        // 立即检查一次\n        setTimeout(() => this.checkForUpdate(), 5000);\n        // 定期检查\n        this.timer = setInterval(() => {\n            this.checkForUpdate();\n        }, this.checkInterval);\n    }\n    /**\n     * 停止版本检查\n     */\n    stopVersionCheck() {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null;\n        }\n    }\n    /**\n     * 检查是否有新版本\n     */\n    async checkForUpdate() {\n        // 如果是本地开发环境，直接返回false\n        if (this.isLocalDevelopment && this.options.skipInDevelopment) {\n            return false;\n        }\n        if (this.isChecking) {\n            return false;\n        }\n        this.isChecking = true;\n        try {\n            // 方法1: 检查package.json的版本号和修改时间（主要方式）\n            const hasPackageUpdate = await this.checkVersionByPackage();\n            if (hasPackageUpdate) {\n                return true;\n            }\n            // 方法2: 检查index.html的变化（备选方式）\n            const hasIndexUpdate = await this.checkVersionByIndex();\n            if (hasIndexUpdate) {\n                return true;\n            }\n        }\n        catch (error) {\n            console.warn('版本检查失败:', error);\n            // 如果检查失败，可能是网络问题或新版本导致的路径变化\n            // 尝试简单的连通性测试\n            try {\n                await fetch('/', { method: 'HEAD', cache: 'no-cache' });\n            }\n            catch (connectError) {\n                // 连接失败，可能需要更新\n                this.notifyUpdate('network-error');\n                return true;\n            }\n        }\n        finally {\n            this.isChecking = false;\n        }\n        return false;\n    }\n    /**\n     * 通过检查package.json来判断更新（主要方式）\n     */\n    async checkVersionByPackage() {\n        try {\n            const response = await fetch(`${this.options.versionCheckUrl}?${Date.now()}`, {\n                cache: 'no-cache'\n            });\n            if (response.ok) {\n                const packageInfo = await response.json();\n                const remoteVersion = packageInfo.version;\n                // 获取HTTP缓存头信息\n                const etag = response.headers.get('etag');\n                const lastModified = response.headers.get('last-modified');\n                // 获取本地存储的信息\n                const storedPackageInfo = localStorage.getItem('app_package_info');\n                // 首次访问，存储信息\n                if (!storedPackageInfo) {\n                    const packageData = {\n                        version: remoteVersion,\n                        etag: etag || undefined,\n                        lastModified: lastModified || undefined,\n                        checkTime: Date.now()\n                    };\n                    localStorage.setItem('app_package_info', JSON.stringify(packageData));\n                    return false;\n                }\n                const localPackageInfo = JSON.parse(storedPackageInfo);\n                // 检查各种变化情况\n                const hasVersionChange = remoteVersion && remoteVersion !== localPackageInfo.version;\n                const hasEtagChange = etag && etag !== localPackageInfo.etag;\n                const hasLastModifiedChange = lastModified && lastModified !== localPackageInfo.lastModified;\n                // 如果有任何变化，说明应用已更新或重新部署\n                if (hasVersionChange || hasEtagChange || hasLastModifiedChange) {\n                    // 更新本地存储\n                    const updatedPackageData = {\n                        version: remoteVersion,\n                        etag: etag || undefined,\n                        lastModified: lastModified || undefined,\n                        checkTime: Date.now()\n                    };\n                    localStorage.setItem('app_package_info', JSON.stringify(updatedPackageData));\n                    // 根据变化类型确定提示原因\n                    const reason = hasVersionChange ? 'version-change' : 'redeploy';\n                    this.notifyUpdate(reason);\n                    return true;\n                }\n            }\n        }\n        catch (error) {\n            console.warn('无法获取package.json:', error);\n        }\n        return false;\n    }\n    /**\n     * 通过检查index.html来判断更新（备选方式）\n     */\n    async checkVersionByIndex() {\n        try {\n            const response = await fetch(`/index.html?${Date.now()}`, {\n                method: 'HEAD',\n                cache: 'no-cache'\n            });\n            if (response.ok) {\n                // 通过ETag或Last-Modified来判断是否有更新\n                const etag = response.headers.get('etag');\n                const lastModified = response.headers.get('last-modified');\n                const storedEtag = localStorage.getItem('app_index_etag');\n                const storedLastModified = localStorage.getItem('app_index_last_modified');\n                // 首次访问，存储当前值\n                if (!storedEtag && !storedLastModified) {\n                    if (etag)\n                        localStorage.setItem('app_index_etag', etag);\n                    if (lastModified)\n                        localStorage.setItem('app_index_last_modified', lastModified);\n                    return false;\n                }\n                // 检查是否有变化\n                const hasUpdate = (etag && etag !== storedEtag) || (lastModified && lastModified !== storedLastModified);\n                if (hasUpdate) {\n                    // 更新存储的值\n                    if (etag)\n                        localStorage.setItem('app_index_etag', etag);\n                    if (lastModified)\n                        localStorage.setItem('app_index_last_modified', lastModified);\n                    this.notifyUpdate('redeploy');\n                    return true;\n                }\n            }\n        }\n        catch (error) {\n            console.warn('无法检查index.html:', error);\n        }\n        return false;\n    }\n    /**\n     * 通知有新版本更新\n     */\n    notifyUpdate(reason = 'unknown') {\n        console.log('检测到应用更新, 原因:', reason);\n        this.onUpdateCallbacks.forEach((callback) => {\n            try {\n                callback(reason);\n            }\n            catch (error) {\n                console.error('Update callback error:', error);\n            }\n        });\n    }\n    /**\n     * 注册更新回调\n     */\n    onUpdate(callback) {\n        if (typeof callback === 'function') {\n            this.onUpdateCallbacks.push(callback);\n        }\n    }\n    /**\n     * 注册资源错误回调\n     */\n    onResourceError(callback) {\n        if (typeof callback === 'function') {\n            this.onResourceErrorCallbacks.push(callback);\n        }\n    }\n    /**\n     * 移除回调\n     */\n    removeCallback(callback) {\n        const updateIndex = this.onUpdateCallbacks.indexOf(callback);\n        if (updateIndex > -1) {\n            this.onUpdateCallbacks.splice(updateIndex, 1);\n        }\n        const errorIndex = this.onResourceErrorCallbacks.indexOf(callback);\n        if (errorIndex > -1) {\n            this.onResourceErrorCallbacks.splice(errorIndex, 1);\n        }\n    }\n    /**\n     * 销毁检测器\n     */\n    destroy() {\n        this.stopVersionCheck();\n        this.onUpdateCallbacks = [];\n        this.onResourceErrorCallbacks = [];\n    }\n    /**\n     * 手动设置开发模式\n     */\n    setDevelopmentMode(isDev) {\n        this.isLocalDevelopment = isDev;\n        if (isDev) {\n            console.log('手动设置为开发模式，停止版本检测');\n            this.stopVersionCheck();\n        }\n        else {\n            console.log('手动设置为生产模式，重新启动版本检测');\n            this.init();\n        }\n    }\n    /**\n     * 获取当前是否为开发环境\n     */\n    isDevelopment() {\n        return this.isLocalDevelopment;\n    }\n    /**\n     * 刷新页面\n     */\n    reload() {\n        // 清除缓存并刷新\n        if ('serviceWorker' in navigator) {\n            navigator.serviceWorker.getRegistrations().then((registrations) => {\n                registrations.forEach((registration) => registration.unregister());\n                setTimeout(() => window.location.reload(), 100);\n            });\n        }\n        else {\n            window.location.reload();\n        }\n    }\n}\n","references":[],"dts":{"name":"/Volumes/Lenovo/work/fs-ai-chat-ui/version-update-detector/dist/VersionDetector.d.ts","writeByteOrderMark":false,"text":"/**\n * 应用版本检测工具类\n * 用于检测应用版本更新，监听资源加载失败等\n */\nexport interface VersionDetectorOptions {\n    /** 检查间隔时间（毫秒），默认30分钟 */\n    checkInterval?: number;\n    /** 是否在开发环境下跳过检测，默认true */\n    skipInDevelopment?: boolean;\n    /** 自定义开发环境检测函数 */\n    isDevelopment?: () => boolean;\n    /** 版本检查的URL路径，默认为'/package.json' */\n    versionCheckUrl?: string;\n    /** 是否启用资源错误监听，默认true */\n    enableResourceErrorDetection?: boolean;\n}\nexport interface PackageInfo {\n    version: string;\n    etag?: string;\n    lastModified?: string;\n    checkTime: number;\n}\nexport type UpdateReason = 'version-change' | 'redeploy' | 'resource-error' | 'network-error' | 'unknown';\nexport declare class VersionDetector {\n    private currentVersion;\n    private checkInterval;\n    private timer;\n    private isChecking;\n    private onUpdateCallbacks;\n    private onResourceErrorCallbacks;\n    private isLocalDevelopment;\n    private options;\n    constructor(options?: VersionDetectorOptions);\n    private init;\n    /**\n     * 检测是否为本地开发环境\n     */\n    private detectLocalEnvironment;\n    /**\n     * 监听资源加载失败事件\n     */\n    private listenResourceErrors;\n    /**\n     * 处理资源加载错误\n     */\n    private handleResourceError;\n    /**\n     * 开始定期检查版本\n     */\n    private startVersionCheck;\n    /**\n     * 停止版本检查\n     */\n    stopVersionCheck(): void;\n    /**\n     * 检查是否有新版本\n     */\n    checkForUpdate(): Promise<boolean>;\n    /**\n     * 通过检查package.json来判断更新（主要方式）\n     */\n    private checkVersionByPackage;\n    /**\n     * 通过检查index.html来判断更新（备选方式）\n     */\n    private checkVersionByIndex;\n    /**\n     * 通知有新版本更新\n     */\n    private notifyUpdate;\n    /**\n     * 注册更新回调\n     */\n    onUpdate(callback: (reason: UpdateReason) => void): void;\n    /**\n     * 注册资源错误回调\n     */\n    onResourceError(callback: (element?: Element) => void): void;\n    /**\n     * 移除回调\n     */\n    removeCallback(callback: Function): void;\n    /**\n     * 销毁检测器\n     */\n    destroy(): void;\n    /**\n     * 手动设置开发模式\n     */\n    setDevelopmentMode(isDev: boolean): void;\n    /**\n     * 获取当前是否为开发环境\n     */\n    isDevelopment(): boolean;\n    /**\n     * 刷新页面\n     */\n    reload(): void;\n}\n"}}
